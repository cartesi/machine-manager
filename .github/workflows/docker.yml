name: Docker
on: [push]
env:
  ROM_VERSION: v0.12.0
  KERNEL_VERSION: v0.13.0
  ROOTFS_VERSION: v0.14.0
  KERNEL_FILE: linux-5.5.19-ctsi-6.bin
  EMULATOR_VERSION: 0.11.1
jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Setup docker image tags
        id: docker_image_tags
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-manager
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.ubuntu-buildx-cache
          key: ${{ runner.os }}-ubuntu-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ubuntu-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Rust Machine Manager docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          tags: ${{ steps.docker_image_tags.outputs.tags }}
          push: true
          load: false
          cache-from: type=local,src=/tmp/.ubuntu-buildx-cache
          cache-to: type=local,dest=/tmp/.ubuntu-buildx-cache


  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx2
        uses: docker/setup-buildx-action@v1

      - name: Docker meta for machine emulator image
        id: docker_meta_emulator_build
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
          tag-custom: |
            test

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential curl libboost-filesystem-dev libreadline-dev libboost-context-dev libboost-coroutine-dev libboost-serialization-dev libboost-log-dev libboost-filesystem-dev libssl-dev libc-ares-dev zlib1g-dev ca-certificates patchelf automake cmake clang-tidy-12 clang-format-12 liblua5.3-dev lua-socket
          curl https://sh.rustup.rs -sSf | bash -s -- -y
          echo 'source $HOME/.cargo/env' >> $HOME/.bashrc
          export ARCH=$(uname -m | sed 's/aarch64/aarch_64/') && curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protoc-3.20.1-linux-$ARCH.zip && unzip protoc-3.20.1-linux-$ARCH.zip -d $HOME/.local

      - name: Build machine emulator image
        id: docker_build_machine_emulator
        uses: docker/build-push-action@v2
        with:
          file: .github/workflows/Dockerfile
          builder: ${{ steps.buildx2.outputs.name }}
          context: .
          push: false
          load: true
          tags: ${{ steps.docker_meta_emulator_build.outputs.tags }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.CI_TOKEN }}

      - name: Download emulator binary files
        run: |
          mkdir -p /opt
          docker run --rm -v /opt:/opt/destination:rw -t ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator:${{ env.EMULATOR_VERSION }} /bin/cp -vr /opt/cartesi /opt/destination/

      - name: Set current git organization env var
        id: git_org
        run: echo "::set-output name=current_organization::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 1)"

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ steps.git_org.outputs.current_organization }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ steps.git_org.outputs.current_organization }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: ${{ env.KERNEL_FILE }}
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ steps.git_org.outputs.current_organization }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom.bin
          token: ${{ secrets.CI_TOKEN }}
#
      - name: Move images to /opt/cartesi/share/images directory
        run: |
          sudo chmod a+rwx -R /opt/cartesi
          mv rom.bin rootfs.ext2 /opt/cartesi/share/images
          mv ${{ env.KERNEL_FILE }} /opt/cartesi/share/images/linux.bin
          sha256sum /opt/cartesi/share/images/linux.bin
          sha256sum /opt/cartesi/share/images/rom.bin
          sha256sum /opt/cartesi/share/images/rootfs.ext2
          sha256sum /opt/cartesi/bin/remote-cartesi-machine
          ls -al /opt/cartesi/share/images/

      - name: Build grpc stub dependencies
        run: |
          cd cartesi-grpc-interfaces && PATH="$PATH:$HOME/.local/bin" cargo build --release

      - name: Build Cartesi emulator machine grpc client
        run: |
          cd grpc-cartesi-machine && PATH="$PATH:$HOME/.local/bin" cargo build --release

      - name: Run unit tests for Cartesi emulator machine grpc client
        run: |
          cd grpc-cartesi-machine && REMOTE_CARTESI_MACHINE_LOG_LEVEL=trace PATH="$PATH:$HOME/.local/bin" cargo test --release -- --test-threads=1

      - name: Build Machine Manager Service
        run: |
          cd machine-manager-server && PATH="$PATH:$HOME/.local/bin" cargo build --release && PATH="$PATH:$HOME/.local/bin" cargo install --force --path . --root /opt/cartesi

      - name: Execute Machine Manager Tests
        run: |
          export CARTESI_BIN_PATH=/opt/cartesi/bin
          export CARTESI_IMAGE_PATH=/opt/cartesi/share/images
          cd tests/rust-test-client && PATH="$PATH:$HOME/.local/bin" cargo test --release
