name: Docker
on: [push]
env:
  ROM_VERSION: v0.8.0
  KERNEL_VERSION: v0.9.0
  ROOTFS_VERSION: v0.8.0
  EMULATOR_VERSION: 0.8.0
  KERNEL_FILE: linux-5.5.19-ctsi-3.bin
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.ubuntu-buildx-cache
          key: ${{ runner.os }}-ubuntu-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ubuntu-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential curl libboost-filesystem-dev libreadline-dev libboost-context-dev libboost-coroutine-dev libboost-serialization-dev libboost-filesystem-dev libssl-dev libc-ares-dev zlib1g-dev ca-certificates patchelf automake cmake liblua5.3-dev lua-socket
          pip3 install -r requirements.txt
          curl https://sh.rustup.rs -sSf | bash -s -- -y
          echo 'source $HOME/.cargo/env' >> $HOME/.bashrc

      - name: Download emulator binary files
        run: |
          mkdir -p /opt
          docker run --rm -v /opt:/opt/destination:rw -t ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator:${{ env.EMULATOR_VERSION }} /bin/cp -vr /opt/cartesi /opt/destination/

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: ${{ env.KERNEL_FILE }}
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to /opt/cartesi/share/images directory
        run: |
          sudo chmod a+rwx -R /opt/cartesi
          mv rom.bin rootfs.ext2 /opt/cartesi/share/images
          mv ${{ env.KERNEL_FILE }} /opt/cartesi/share/images/linux.bin
          sha256sum /opt/cartesi/share/images/linux.bin
          sha256sum /opt/cartesi/share/images/rom.bin
          sha256sum /opt/cartesi/share/images/rootfs.ext2
          sha256sum /opt/cartesi/bin/remote-cartesi-machine

      - name: Generate grpc python code
        run: |
          ./generate-cartesi-gprc

      - name: Install machine manager
        run: |
          ./install.sh

      - name: Execute Machine Manager Tests
        run: |
          export CARTESI_BIN_PATH=/opt/cartesi/bin
          export CARTESI_IMAGE_PATH=/opt/cartesi/share/images
          cd tests/rust-test-client && cargo test --release

      - name: Setup docker image tags
        id: docker_image_tags
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-manager
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Set test image tag name
        id: docker_test_image_tag
        run: echo ::set-output name=name::$(echo "${{ steps.docker_image_tags.outputs.tags }}" | head -n 1 | xargs)

      - name: Build test docker image
        id: docker_build_test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          push: false
          tags: ${{ steps.docker_test_image_tag.outputs.name }}
          build-args: |
            EMULATOR_REPOSITORY=${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
            EMULATOR_VERSION=${{ env.EMULATOR_VERSION }}

      - name: Test docker image
        run: |
          docker pull fullstorydev/grpcurl:v1.8.5
          docker pull ${{ steps.docker_test_image_tag.outputs.name }}
          docker run --network=host --name cartesi_mm_container -t ${{ steps.docker_test_image_tag.outputs.name }} &
          timeout 20 bash -c 'while ! nc -q0 127.0.0.1 50051 < /dev/null > /dev/null 2>&1; do sleep 1; done'
          docker run --network=host fullstorydev/grpcurl -plaintext 127.0.0.1:50051 list
          docker kill cartesi_mm_container

      - name: Build and push docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          push: true
          tags: ${{ steps.docker_image_tags.outputs.tags }}
          build-args: |
            EMULATOR_REPOSITORY=${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
            EMULATOR_VERSION=${{ env.EMULATOR_VERSION }}
